import React from 'react'
import { useState, useRef, useEffect } from 'react'
import Todo from './components/Todo'
import Form from './components/Form'
import FilterButton from './components/FilterButton'
import Nanoid, { nanoid } from 'nanoid'
import UsePrevious from './components/shared/UsePrevious'

// Keys to filter the tasks items
const FILTER_MAP = {
    All: () => true,
    Active: task => !task.completed,
    Completed: task => task.completed
}
const FILTER_NAMES = Object.keys(FILTER_MAP)


function App(props) {
    // Main state tracker of the tasks list
    const [tasks, setTasks] = useState(props.tasks)

    // Filter state tracker for All, Active and Completed tasks
    const [filter, setFilter] = useState('All')

    // Add a task
    const addTask = (name) => {
        // Each task ID becomes a prefix todo- plus a unique string generated by nanoid.
        const newTask = { id: 'todo-' + nanoid(), name: name, completed: false }
        setTasks([newTask, ...tasks])
    }

    // Complete a task
    function toggleTaskCompleted(id) {
        const updatedTasks = tasks.map(task => {
            if (id === task.id) {
                return { ...task, completed: !task.completed }
            }
            return task;
        })
        setTasks(updatedTasks)
    }

    // Delete a task
    function deleteTask(id) {
        const remainingTasks = tasks.filter(task => id !== task.id)
        setTasks(remainingTasks);
    }

    // Edit a task
    function editTask(id, newName) {
        const editedTaskList = tasks.map(task => {
            if (id === task.id) {
                return { ...task, name: newName }
            }
            return task
        })
        setTasks(editedTaskList)
    }

    // Map the tasks list with filter
    const taskList = tasks
        .filter(FILTER_MAP[filter])
        .map(task => (
            <Todo
                id={task.id}
                name={task.name}
                completed={task.completed}
                key={task.id}
                toggleTaskCompleted={toggleTaskCompleted}
                deleteTask={deleteTask}
                editTask={editTask}
            />));

    // Map the filter buttons under the form
    const filterList = FILTER_NAMES.map(name => (
        <FilterButton
            key={name}
            name={name}
            isPressed={name === filter}
            setFilter={setFilter}
        />
    ))

    // Update the sum of remaining tasks
    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';
    const headingText = `${taskList.length} ${tasksNoun} remaining`;

    // Delete focus ref
    const listHeadingRef = useRef(null)

    // Previous state tracker to keep the focus when deleting
    const prevTaskLength = UsePrevious(tasks.length)

    // Focus after delete
    useEffect(() => {
        if (tasks.length - prevTaskLength === -1) {
            listHeadingRef.current.focus()
        }
    }, [tasks.length, prevTaskLength])

    return (
        <div className="todoapp stack-large">
            <h1>Tasks</h1>
            <Form addTask={addTask} />
            <div className='filters btn-group stack-exception'>
                {filterList}
            </div>

            <h2 id="list-heading" tabIndex='-1' ref={listHeadingRef}>
                {headingText}
            </h2>
            <ul
                role="list"
                className="todo-list stack-large stack-exception"
                aria-labelledby="list-heading"
            >
                {taskList}
            </ul>
        </div>
    );
}

export default App